var searchIndex = JSON.parse('{\
"routing":{"doc":"P2PNode implementation for a resilient decentralised…","i":[[3,"TransportConfig","routing","QuicP2p configurations",null,null],[12,"hard_coded_contacts","","Hard Coded contacts",0,null],[12,"port","","Port we want to reserve for QUIC. If none supplied we\'ll…",0,null],[12,"ip","","IP address for the listener. If none supplied we\'ll use…",0,null],[12,"max_msg_size_allowed","","This is the maximum message size we\'ll allow the peer to…",0,null],[12,"idle_timeout_msec","","If we hear nothing from the peer in the given interval we…",0,null],[12,"keep_alive_interval_msec","","Interval to send keep-alives if we are idling so that the…",0,null],[12,"bootstrap_cache_dir","","Directory in which the bootstrap cache will be stored. If…",0,null],[12,"upnp_lease_duration","","Duration of a UPnP port mapping.",0,null],[12,"our_type","","Specify if we are a client or a node",0,null],[4,"TransportEvent","","QuicP2p Events to the user",null,null],[13,"BootstrapFailure","","Network bootstrap failed.",1,null],[13,"BootstrappedTo","","Bootstrap connection to this node was successful.",1,null],[12,"node","routing::TransportEvent","Node information.",2,null],[13,"ConnectionFailure","routing","Connection to this peer failed.",1,null],[12,"peer","routing::TransportEvent","Peer.",3,null],[12,"err","","Error explaining connection failure.",3,null],[13,"SentUserMessage","routing","The given message was successfully sent to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer.",4,null],[12,"msg","","Sent message.",4,null],[12,"token","","Token, originally given by the user, for context.",4,null],[13,"UnsentUserMessage","routing","The given message was not sent to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer.",5,null],[12,"msg","","Unsent message.",5,null],[12,"token","","Token, originally given by the user, for context.",5,null],[13,"ConnectedTo","routing","Successfully connected to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer information.",6,null],[13,"NewMessage","routing","A new message was received from this peer.",1,null],[12,"peer","routing::TransportEvent","Sending peer.",7,null],[12,"msg","","The new message.",7,null],[13,"Finish","routing","No more messages will be fired after this",1,null],[3,"Prefix","","A section prefix, i.e. a sequence of bits specifying the…",null,null],[3,"XorName","","A 256-bit number, viewed as a point in XOR space.",null,null],[12,"0","","",8,null],[17,"XOR_NAME_LEN","","Constant byte length of `XorName`.",null,null],[3,"Proof","","Proof that a quorum of the section elders has agreed on…",null,null],[12,"public_key","","The BLS public key.",9,null],[12,"signature","","The BLS signature corresponding to the public key.",9,null],[3,"ProofShare","","Single share of `Proof`.",null,null],[12,"public_key_set","","BLS public key set.",10,null],[12,"index","","Index of the node that created this proof share.",10,null],[12,"signature_share","","BLS signature share corresponding to the `index`-th public…",10,null],[3,"SignatureAccumulator","","Accumulator for signature shares for arbitrary payloads.",null,null],[3,"FullId","","Network identity component containing name, and public and…",null,null],[3,"P2pNode","","Network p2p node identity. When a node knows another node…",null,null],[3,"PublicId","","Network identity component containing name and public keys.",null,null],[3,"NetworkParams","","Network parameters: number of elders, recommended section…",null,null],[12,"elder_size","","The number of elders per section",11,null],[12,"recommended_section_size","","Recommended number of nodes in a section.",11,null],[3,"Node","","Interface for sending and receiving messages to and from…",null,null],[3,"NodeConfig","","Node configuration.",null,null],[12,"first","","If true, configures the node to start a new network…",12,null],[12,"full_id","","The ID of the node or `None` for randomly generated one.",12,null],[12,"transport_config","","Configuration for the underlying network transport.",12,null],[12,"network_params","","Global network parameters. Must be identical for all nodes…",12,null],[12,"rng","","Random number generator to be used by the node. Can be…",12,null],[3,"PausedState","","A type that wraps the internal state of a node while it is…",null,null],[3,"SectionProofChain","","Chain of section BLS keys where every key is proven…",null,null],[4,"AccumulationError","","Error returned from SignatureAccumulator::add.",null,null],[13,"NotEnoughShares","","There are not enough signature shares yet, more need to be…",13,null],[13,"AlreadyAccumulated","","Enough signature share were already collected before and…",13,null],[13,"InvalidShare","","The signature share being added is invalid. Such share is…",13,null],[13,"Serialise","","The payload failed to be serialised and can\'t be inserted…",13,null],[13,"Combine","","The signature combination failed even though there are…",13,null],[4,"RoutingError","","Internal error.",null,null],[13,"BadLocation","","",14,null],[13,"FailedSignature","","",14,null],[13,"CannotRoute","","",14,null],[13,"Network","","",14,null],[13,"InvalidState","","",14,null],[13,"Bincode","","",14,null],[13,"InvalidSource","","",14,null],[13,"InvalidMessage","","",14,null],[13,"UntrustedMessage","","",14,null],[13,"InvalidSignatureShares","","",14,null],[13,"InvalidElderDkgResult","","",14,null],[4,"DstLocation","","Message destination location.",null,null],[13,"Node","","Destination is a single node with the given name.",15,null],[13,"Section","","Destination are the nodes of the section whose prefix…",15,null],[13,"Direct","","Destination is the node at the `ConnectionInfo` the…",15,null],[4,"SrcLocation","","Message source location.",null,null],[13,"Node","","A single node with the given name.",16,null],[13,"Section","","A section with the given prefix.",16,null],[0,"event","","Routing events.",null,null],[4,"Connected","routing::event","An Event raised as node complete joining",null,null],[13,"First","","Node first joining the network",17,null],[13,"Relocate","","Node relocating from one section to another",17,null],[4,"Event","","An Event raised by a `Node` or `Client` via its event…",null,null],[13,"Connected","","The node has successfully connected to the network.",18,null],[13,"MessageReceived","","Received a message.",18,null],[12,"content","routing::event::Event","The content of the message.",19,null],[12,"src","","The source location that sent the message.",19,null],[12,"dst","","The destination location that receives the message.",19,null],[13,"Consensus","routing::event","Consensus on a custom event.",18,null],[13,"Promoted","","The node has been promoted to elder",18,null],[13,"Demoted","","The node has been demoted from elder",18,null],[13,"MemberJoined","","An adult or elder joined our section.",18,null],[12,"name","routing::event::Event","Name of the node",20,null],[12,"previous_name","","Previous name before relocation",20,null],[12,"age","","Age of the node",20,null],[13,"InfantJoined","routing::event","An infant node joined our section.",18,null],[12,"name","routing::event::Event","Name of the node",21,null],[12,"age","","Age of the node",21,null],[13,"MemberLeft","routing::event","A node left our section.",18,null],[12,"name","routing::event::Event","Name of the node",22,null],[12,"age","","Age of the node",22,null],[13,"EldersChanged","routing::event","The set of elders in our section has changed.",18,null],[12,"prefix","routing::event::Event","The prefix of our section.",23,null],[12,"key","","The BLS public key of our section.",23,null],[12,"elders","","The set of elders of our section.",23,null],[13,"RestartRequired","routing::event","Disconnected or failed to connect - restart required.",18,null],[13,"Terminated","","Startup failed - terminate.",18,null],[11,"verify","routing","Verifies this proof against the payload.",9,[[]]],[11,"new","","Creates new proof share.",10,[[["publickeyset",3],["secretkeyshare",3]]]],[11,"verify","","Verifies this proof share against the payload.",10,[[]]],[11,"new","","Create new accumulator with default expiration.",24,[[]]],[11,"with_expiration","","Create new accumulator with the given expiration.",24,[[["duration",3]]]],[11,"add","","Add new share into the accumulator. If enough valid…",24,[[["proofshare",3]],[["accumulationerror",4],["result",4]]]],[11,"gen","","Construct a `FullId` with randomly generated keys.",25,[[["mainrng",3]]]],[11,"within_range","","Construct a `FullId` whose name is in the interval [start,…",25,[[["mainrng",3],["rangeinclusive",3]]]],[11,"public_id","","Returns public ID reference.",25,[[],["publicid",3]]],[11,"public_id_mut","","Returns mutable reference to public ID.",25,[[],["publicid",3]]],[11,"sign","","Sign a message.",25,[[],["signature",3]]],[11,"name","","Returns initial/relocated name.",26,[[],["xorname",3]]],[11,"verify","","Verifies this id signed a message",26,[[["signature",3]]]],[11,"public_signing_key","","Returns public signing key.",26,[[],["publickey",3]]],[11,"public_encryption_key","","Returns public encryption key.",26,[[],["publickey",3]]],[11,"new","","Creates a new `P2pNode` given a `PublicId` and a…",27,[[["publicid",3],["socketaddr",4]]]],[11,"public_id","","Returns the `PublicId`.",27,[[],["publicid",3]]],[11,"name","","Returns the `XorName` of the underlying `PublicId`.",27,[[],["xorname",3]]],[11,"peer_addr","","Returns the `SocketAddr`.",27,[[],["socketaddr",4]]],[11,"is_section","","Returns whether this location is a section.",16,[[]]],[11,"is_section","","Returns whether this location is a section.",15,[[]]],[11,"new","","Create new node using the given config.",28,[[["nodeconfig",3]]]],[11,"pause","","Pauses the node in order to be upgraded and/or restarted.…",28,[[],[["result",4],["pausedstate",3],["routingerror",4]]]],[11,"resume","","Resume previously paused node.",28,[[["pausedstate",3]]]],[11,"register","","Register the node event channels with the provided selector.",28,[[["select",3]]]],[11,"handle_selected_operation","","Processes events received externally from one of the…",28,[[],[["recverror",3],["result",4]]]],[11,"is_running","","Returns whether this node is running or has been terminated.",28,[[]]],[11,"id","","Returns the `PublicId` of this node.",28,[[],["publicid",3]]],[11,"name","","The name of this node.",28,[[],["xorname",3]]],[11,"our_connection_info","","Returns connection info of this node.",28,[[],[["result",4],["socketaddr",4],["routingerror",4]]]],[11,"our_prefix","","Our `Prefix` once we are a part of the section.",28,[[],[["prefix",3],["option",4]]]],[11,"matches_our_prefix","","Finds out if the given XorName matches our prefix. Returns…",28,[[["xorname",3]],[["result",4],["routingerror",4]]]],[11,"is_elder","","Returns whether the node is Elder.",28,[[]]],[11,"our_elders","","Returns the information of all the current section elders.",28,[[]]],[11,"our_elders_sorted_by_distance_to","","Returns the elders of our section sorted by their distance…",28,[[["xorname",3]],[["p2pnode",3],["vec",3]]]],[11,"our_adults","","Returns the information of all the current section adults.",28,[[]]],[11,"our_adults_sorted_by_distance_to","","Returns the adults of our section sorted by their distance…",28,[[["xorname",3]],[["p2pnode",3],["vec",3]]]],[11,"in_dst_location","","Checks whether the given location represents self.",28,[[["dstlocation",4]]]],[11,"vote_for_user_event","","Vote for a user-defined event. Returns `InvalidState`…",28,[[["vec",3]],[["result",4],["routingerror",4]]]],[11,"send_message","","Send a message.",28,[[["vec",3],["dstlocation",4],["srclocation",4]],[["result",4],["routingerror",4]]]],[11,"send_message_to_client","","Send a message to a client peer.",28,[[["socketaddr",4],["bytes",3],["token",6]],[["result",4],["routingerror",4]]]],[11,"disconnect_from_client","","Disconnect form a client peer.",28,[[["socketaddr",4]],[["result",4],["routingerror",4]]]],[11,"public_key_set","","Returns the current BLS public key set or…",28,[[],[["routingerror",4],["publickeyset",3],["result",4]]]],[11,"secret_key_share","","Returns the current BLS secret key share or…",28,[[],[["routingerror",4],["result",4],["secretkeyshare",3]]]],[11,"our_history","","Returns our section proof chain, or `None` if we are not…",28,[[],[["sectionproofchain",3],["option",4]]]],[11,"our_index","","Returns our index in the current BLS group or…",28,[[],[["result",4],["routingerror",4]]]],[11,"new","","Creates new chain consisting of only one block.",29,[[["publickey",3]]]],[11,"first_key","","Returns the first key of the chain.",29,[[],["publickey",3]]],[11,"last_key","","Returns the last key of the chain.",29,[[],["publickey",3]]],[11,"keys","","Returns all the keys from the chain as a…",29,[[]]],[11,"has_key","","Returns whether this chain contains the given key.",29,[[["publickey",3]]]],[11,"index_of","","Returns the index of the key in the chain or `None` if not…",29,[[["publickey",3]],["option",4]]],[11,"slice","","Returns a subset of this chain specified by the given…",29,[[["rangebounds",8]]]],[11,"len","","Number of blocks in the chain (including the first block)",29,[[]]],[11,"last_key_index","","Index of the last key in the chain.",29,[[]]],[11,"self_verify","","Check that all the blocks in the chain except the first…",29,[[]]],[11,"check_trust","","Verify this proof chain against the given trusted keys.",29,[[],["truststatus",4]]],[14,"log","","Log a message at the given level prefixed with the current…",null,null],[14,"error","","Log a message at the error level prefixed with the current…",null,null],[14,"warn","","Log a message at the warn level prefixed with the current…",null,null],[14,"info","","Log a message at the info level prefixed with the current…",null,null],[14,"debug","","Log a message at the debug level prefixed with the current…",null,null],[14,"trace","","Log a message at the trace level prefixed with the current…",null,null],[14,"log_or_panic","","This macro will panic with the given message if compiled…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"equivalent","","",30,[[]]],[11,"clear","","",30,[[]]],[11,"initialize","","",30,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"initialize","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"equivalent","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"equivalent","","",10,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"initialize","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"equivalent","","",27,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"equivalent","","",26,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"initialize","","",11,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"initialize","","",12,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"equivalent","","",29,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"as_fail","","",13,[[],["fail",8]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"as_fail","","",14,[[],["fail",8]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"equivalent","","",16,[[]]],[11,"from","routing::event","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"fmt","routing","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",8,[[["xorname",3]]]],[11,"ne","","",8,[[["xorname",3]]]],[11,"eq","","",30,[[["prefix",3]]]],[11,"fmt","","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"deserialize","","",8,[[],[["result",4],["xorname",3]]]],[11,"deserialize","","",30,[[],[["result",4],["prefix",3]]]],[11,"cmp","","",30,[[["prefix",3]],["ordering",4]]],[11,"cmp","","",8,[[["xorname",3]],["ordering",4]]],[11,"deref","","",8,[[]]],[11,"partial_cmp","","",30,[[["prefix",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",8,[[["xorname",3]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["xorname",3]]]],[11,"le","","",8,[[["xorname",3]]]],[11,"gt","","",8,[[["xorname",3]]]],[11,"ge","","",8,[[["xorname",3]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","","",8,[[],["xorname",3]]],[11,"default","","",30,[[],["prefix",3]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",8,[[]]],[11,"hash","","",30,[[]]],[11,"as_ref","","",8,[[],["xorname",3]]],[11,"as_ref","","",8,[[]]],[11,"clone","","",30,[[],["prefix",3]]],[11,"clone","","",8,[[],["xorname",3]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"from_str","","",30,[[],[["result",4],["prefix",3]]]],[11,"not","","",8,[[],["xorname",3]]],[11,"serialize","","",0,[[],["result",4]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]],["config",3]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",0,[[["config",3]]]],[11,"ne","","",0,[[["config",3]]]],[11,"default","","",0,[[],["config",3]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",0,[[],["config",3]]],[11,"deserialize","","",0,[[],[["config",3],["result",4]]]],[11,"as_ref","","",26,[[],["xorname",3]]],[11,"from","","",13,[[["error",6]]]],[11,"from","","",13,[[["error",4]]]],[11,"from","","",14,[[["quicp2perror",4]]]],[11,"from","","",14,[[["error",6]]]],[11,"clone","routing::event","",17,[[],["connected",4]]],[11,"clone","","",18,[[],["event",4]]],[11,"clone","routing","",9,[[],["proof",3]]],[11,"clone","","",10,[[],["proofshare",3]]],[11,"clone","","",25,[[],["fullid",3]]],[11,"clone","","",26,[[],["publicid",3]]],[11,"clone","","",27,[[],["p2pnode",3]]],[11,"clone","","",16,[[],["srclocation",4]]],[11,"clone","","",15,[[],["dstlocation",4]]],[11,"clone","","",11,[[],["networkparams",3]]],[11,"clone","","",29,[[],["sectionproofchain",3]]],[11,"default","","",24,[[]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[]]],[11,"cmp","","",9,[[["proof",3]],["ordering",4]]],[11,"cmp","","",10,[[["proofshare",3]],["ordering",4]]],[11,"cmp","","",26,[[["publicid",3]],["ordering",4]]],[11,"cmp","","",27,[[["p2pnode",3]],["ordering",4]]],[11,"eq","routing::event","",17,[[["connected",4]]]],[11,"eq","","",18,[[["event",4]]]],[11,"ne","","",18,[[["event",4]]]],[11,"eq","routing","",9,[[["proof",3]]]],[11,"ne","","",9,[[["proof",3]]]],[11,"eq","","",10,[[["proofshare",3]]]],[11,"ne","","",10,[[["proofshare",3]]]],[11,"eq","","",26,[[["publicid",3]]]],[11,"ne","","",26,[[["publicid",3]]]],[11,"eq","","",27,[[["p2pnode",3]]]],[11,"ne","","",27,[[["p2pnode",3]]]],[11,"eq","","",16,[[["srclocation",4]]]],[11,"ne","","",16,[[["srclocation",4]]]],[11,"eq","","",15,[[["dstlocation",4]]]],[11,"ne","","",15,[[["dstlocation",4]]]],[11,"eq","","",29,[[["sectionproofchain",3]]]],[11,"ne","","",29,[[["sectionproofchain",3]]]],[11,"partial_cmp","","",9,[[["proof",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["proof",3]]]],[11,"le","","",9,[[["proof",3]]]],[11,"gt","","",9,[[["proof",3]]]],[11,"ge","","",9,[[["proof",3]]]],[11,"partial_cmp","","",10,[[["proofshare",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["proofshare",3]]]],[11,"le","","",10,[[["proofshare",3]]]],[11,"gt","","",10,[[["proofshare",3]]]],[11,"ge","","",10,[[["proofshare",3]]]],[11,"partial_cmp","","",26,[[["publicid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["publicid",3]]]],[11,"le","","",26,[[["publicid",3]]]],[11,"gt","","",26,[[["publicid",3]]]],[11,"ge","","",26,[[["publicid",3]]]],[11,"partial_cmp","","",27,[[["p2pnode",3]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["p2pnode",3]]]],[11,"le","","",27,[[["p2pnode",3]]]],[11,"gt","","",27,[[["p2pnode",3]]]],[11,"ge","","",27,[[["p2pnode",3]]]],[11,"fmt","routing::event","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","routing","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",29,[[]]],[11,"description","","",13,[[]]],[11,"cause","","",13,[[],[["error",8],["option",4]]]],[11,"source","","",13,[[],[["option",4],["error",8]]]],[11,"description","","",14,[[]]],[11,"cause","","",14,[[],[["error",8],["option",4]]]],[11,"source","","",14,[[],[["option",4],["error",8]]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",26,[[["serializer",8]],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",26,[[["deserializer",8]],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"verify_signature","","",26,[[]]],[11,"public_id","","",25,[[]]],[11,"verify_signature","","",26,[[]]],[11,"public_id","","",25,[[]]],[11,"sign_detached","","",25,[[]]],[11,"encrypt","","",25,[[["asref",8]],[["vec",3],["option",4]]]],[11,"decrypt","","",25,[[],[["vec",3],["option",4]]]],[11,"read_or_construct_default","","Try and read the config off the disk first. If such a…",0,[[["dirs",4],["option",4]],[["quicp2perror",4],["config",3],["result",4]]]],[11,"new","","Creates a new `Prefix` with the first `bit_count` bits of…",30,[[["xorname",3]],["prefix",3]]],[11,"name","","Returns the name of this prefix.",30,[[],["xorname",3]]],[11,"pushed","","Returns `self` with an appended bit: `0` if `bit` is…",30,[[],["prefix",3]]],[11,"popped","","Returns a prefix copying the first `bitcount() - 1` bits…",30,[[],["prefix",3]]],[11,"bit_count","","Returns the number of bits in the prefix.",30,[[]]],[11,"is_empty","","Returns `true` if this is the empty prefix, with no bits.",30,[[]]],[11,"is_compatible","","Returns `true` if `self` is a prefix of `other` or vice…",30,[[["prefix",3]]]],[11,"is_extension_of","","Returns `true` if `other` is compatible but strictly…",30,[[["prefix",3]]]],[11,"is_neighbour","","Returns `true` if the `other` prefix differs in exactly…",30,[[["prefix",3]]]],[11,"common_prefix","","Returns the number of common leading bits with the input…",30,[[["xorname",3]]]],[11,"matches","","Returns `true` if this is a prefix of the given `name`.",30,[[["xorname",3]]]],[11,"cmp_distance","","Compares the distance of `self` and `other` to `target`.…",30,[[["prefix",3],["xorname",3]],["ordering",4]]],[11,"cmp_breadth_first","","Compares the prefixes using breadth-first order. That is,…",30,[[["prefix",3]],["ordering",4]]],[11,"lower_bound","","Returns the smallest name matching the prefix",30,[[],["xorname",3]]],[11,"upper_bound","","Returns the largest name matching the prefix",30,[[],["xorname",3]]],[11,"range_inclusive","","Inclusive range from lower_bound to upper_bound",30,[[],[["rangeinclusive",3],["xorname",3]]]],[11,"is_covered_by","","Returns whether the namespace defined by `self` is covered…",30,[[]]],[11,"with_flipped_bit","","Returns the neighbouring prefix differing in the `i`-th…",30,[[],["prefix",3]]],[11,"substituted_in","","Returns the given `name` with first bits replaced by `self`",30,[[["xorname",3]],["xorname",3]]],[11,"sibling","","Returns the same prefix, with the last bit flipped, or…",30,[[],["prefix",3]]],[11,"ancestor","","Returns the ancestors of this prefix that has the given…",30,[[],["prefix",3]]],[11,"ancestors","","Returns an iterator that yields all ancestors of this…",30,[[],["ancestors",3]]],[11,"bit","","Returns `true` if the `i`-th bit is `1`.",8,[[]]],[11,"cmp_distance","","Compares the distance of the arguments to `self`. Returns…",8,[[["xorname",3]],["ordering",4]]]],"p":[[3,"TransportConfig"],[4,"TransportEvent"],[13,"BootstrappedTo"],[13,"ConnectionFailure"],[13,"SentUserMessage"],[13,"UnsentUserMessage"],[13,"ConnectedTo"],[13,"NewMessage"],[3,"XorName"],[3,"Proof"],[3,"ProofShare"],[3,"NetworkParams"],[3,"NodeConfig"],[4,"AccumulationError"],[4,"RoutingError"],[4,"DstLocation"],[4,"SrcLocation"],[4,"Connected"],[4,"Event"],[13,"MessageReceived"],[13,"MemberJoined"],[13,"InfantJoined"],[13,"MemberLeft"],[13,"EldersChanged"],[3,"SignatureAccumulator"],[3,"FullId"],[3,"PublicId"],[3,"P2pNode"],[3,"Node"],[3,"SectionProofChain"],[3,"Prefix"],[3,"PausedState"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);